# -*- coding: utf-8 -*-
"""mimic on fhir web app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SDk3n-hNh-G1jBHXWHX5UoxkHfJb_KcV
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import json

# Function to parse a single patient record from FHIR format
def parse_patient_record(record):
    patient_data = {
        'id': record['id'],
        'gender': record['gender'],
        'birthDate': record['birthDate'],
        'maritalStatus': record.get('maritalStatus', {}).get('coding', [{}])[0].get('code', None),
        'race': None,
        'ethnicity': None,
        'birthSex': None
    }

    # Parsing extensions for race, ethnicity, and birthSex
    for extension in record.get('extension', []):
        if extension['url'] == 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-race':
            patient_data['race'] = extension['extension'][0]['valueCoding']['display']
        elif extension['url'] == 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity':
            patient_data['ethnicity'] = extension['extension'][0]['valueCoding']['display']
        elif extension['url'] == 'http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex':
            patient_data['birthSex'] = extension['valueCode']

    return patient_data

# Function to parse a single observation record
def parse_observation_record(record):
    observation_data = {
        'id': record.get('id', None),
        'status': record.get('status', None),
        'category_code': record.get('category', [{}])[0].get('coding', [{}])[0].get('code', None),
        'test_code': record.get('code', {}).get('coding', [{}])[0].get('code', None),
        'test_name': record.get('code', {}).get('coding', [{}])[0].get('display', None),
        'patient_reference': record.get('subject', {}).get('reference', None),
        'encounter_reference': record.get('encounter', {}).get('reference', None),
        'effectiveDateTime': record.get('effectiveDateTime', None),
        'value': None,
        'unit': None
    }

    # Check if 'valueQuantity' exists before accessing it
    if 'valueQuantity' in record:
        observation_data['value'] = record['valueQuantity'].get('value', None)
        observation_data['unit'] = record['valueQuantity'].get('unit', None)

    return observation_data

def find_observations_for_patient(df, patient_ref):
    """
    Function to find all observation resources for a specific patient.

    Parameters:
    df (DataFrame): The DataFrame containing observation data.
    patient_ref (str): The patient reference to filter by.

    Returns:
    DataFrame: A DataFrame containing only the observations for the specified patient.
    """
    filtered_df = df[df['patient_reference'] == patient_ref]
    return filtered_df

# Load data (This should be adjusted based on how you're loading data in your actual app)
patients = []
with open('Patient.ndjson', 'r') as file:
    for line in file:
        json_record = json.loads(line)
        patients.append(parse_patient_record(json_record))

observations = []
with open('ObservationLabevents.ndjson', 'r') as file:
    for line in file:
        json_record = json.loads(line)
        observations.append(parse_observation_record(json_record))

patient_df = pd.DataFrame(patients)
observation_df = pd.DataFrame(observations)

# Streamlit app
def main():
    st.title("MIMIC on FHIR Data Explorer")

    st.write("Explore MIMIC on FHIR patient data and lab observations.")

    # User input for patient reference
    patient_ref = st.text_input("Enter Patient Reference ID:", "Patient/")

    if st.button("Find Observations"):
        if patient_ref:
            observations_for_patient = find_observations_for_patient(observation_df, patient_ref)
            if not observations_for_patient.empty:
                st.write(f"Observations for Patient ID: {patient_ref}")
                st.dataframe(observations_for_patient)

                # Display the top 5 most common labs
                top_labs = observations_for_patient['test_name'].value_counts().head(5)
                st.write("Top 5 Most Common Labs:")
                st.bar_chart(top_labs)
            else:
                st.write("No observations found for this patient.")
        else:
            st.write("Please enter a valid Patient Reference ID.")

if __name__ == "__main__":
    main()

